{
	"info": {
		"_postman_id": "8ab8ae18-4a5a-48bc-9533-177cef28f803",
		"name": "Jenkins-API1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33539833"
	},
	"item": [
		{
			"name": "/sign-up Creates new user with STUDENT permission and sends verification email [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string - User was created\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User was created\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{studentEmail}}\",\n  \"name\": \"{{studentName}}\",\n  \"password\": \"{{studentPassword}}\",\n  \"group\": \"{{studentGroup}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sign-up",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/ - activationCode after registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"studentId\", jsonData[0].id);",
							"pm.environment.set(\"activationCode\", jsonData[0].activationCode);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/api/users?_where=(email,eq,{{studentEmail}})",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "_where",
							"value": "(email,eq,{{studentEmail}})"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/activate/:userId/:activationCode [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string - User was activated\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User was activated\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/activate/{{studentId}}/{{activationCode}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"activate",
						"{{studentId}}",
						"{{activationCode}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/sign-in - [S] New student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 500 ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Body matches user role - STUDENT\", function () {",
							"    ",
							"    pm.expect(pm.response.text()).to.include(\"STUDENT\");",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"studentToken\", jsonData.token);",
							"pm.environment.set(\"studentId\", jsonData.user.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{studentEmail}}\",\n  \"password\": \"{{studentPassword}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sign-in",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "/sign-in-[T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 500 ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Body matches user role - TEACHER\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"TEACHER\");",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"teacherToken\", jsonData.token);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"dub07@freeprodesign.com\",\n  \"password\": \"12345\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sign-in",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "/quiz - [T] Create new quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 2000 ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"quizId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Demo Quiz Ulan1 07/18/24\",\n    \"totalScore\": 18,\n    \"passingPercentage\": 75,\n    \"showStopperQuestion\": 1,\n    \"questions\": [\n        {\n            \"type\": \"TEXTUAL\",\n            \"question\": \"What is your name?\",\n            \"score\": 5\n        },\n        {\n            \"type\": \"SINGLE_CHOICE\",\n            \"question\": \"Which city is city largest in California?\",\n            \"score\": 7,\n            \"answer\": 2,\n            \"hasOtherOption\": false,\n            \"options\": [\n                \"San Francisco\",\n                \"Sacramento\",\n                \"Los Angeles\",\n                \"Redding\"\n            ]\n        },\n        {\n            \"type\": \"MULTIPLE_CHOICE\",\n            \"question\": \"Who was Apple founded by?\",\n            \"score\": 6,\n            \"answers\": [\n                0,\n                1,\n                2\n            ],\n            \"hasOtherOption\": true,\n            \"options\": [\n                \"Steve Jobs\",\n                \"Steve Wozniak\",\n                \"Ronald Wayne\",\n                \"Ronald Reagan\"\n            ]\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/quiz",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"quiz"
					]
				}
			},
			"response": []
		},
		{
			"name": "/quiz - [T] Updating Quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Demo Quiz Ulan1 07/18/24 UPDATED\",\n  \"totalScore\": 18,\n  \"passingPercentage\": 75,\n  \"showStopperQuestion\": 1,\n  \"questions\": [\n    {\n      \"type\": \"TEXTUAL\",\n      \"question\": \"What is your name?\",\n      \"score\": 5\n    },\n    {\n      \"type\": \"SINGLE_CHOICE\",\n      \"question\": \"Which city is city largest in California?\",\n      \"score\": 7,\n      \"answer\": 2,\n      \"hasOtherOption\": false,\n      \"options\": [\n        \"San Francisco\",\n        \"Sacramento\",\n        \"Los Angeles\",\n        \"Redding\"\n      ]\n    },\n    {\n      \"type\": \"MULTIPLE_CHOICE\",\n      \"question\": \"Who was apple founded by?\",\n      \"score\": 6,\n      \"answers\": [\n        0,\n        1,\n        2\n      ],\n      \"hasOtherOption\": true,\n      \"options\": [\n        \"Steve Jobs\",\n        \"Steve Wozniak\",\n        \"Ronald Wayne\",\n        \"Ronald Reagan\"\n      ]\n    }\n  ],\n  \"id\": {{quizId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/quiz/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"quiz",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "/assignments Returns list of all assignments [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 2000 ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/assignments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "/assignment Creates new Assignment [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 2000 ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"assignmentId\", jsonData[0].id);",
							"pm.environment.set(\"assignmentGroupID\", jsonData[0].assignmentGroupID);",
							"",
							"pm.test(\"Verify status, result, and gradeBy values before submisson\", function () {",
							"       pm.expect(jsonData[0].status).to.eql(\"ASSIGNED\");",
							"       pm.expect(jsonData[0].result).to.eql(\"PENDING\");",
							"       pm.expect(jsonData[0].gradedBy).to.eql(\"NONE\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"quizId\": {{quizId}},\n  \"userIds\": [{{studentId}}]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/assignment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "/my-assignments [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var myAssignment = pm.environment.get(\"assignmentId\");",
							"",
							"pm.test(\"Verify assignmentId\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[jsonData.length - 1].id).to.eql(pm.environment.get(\"assignmentId\"));",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/my-assignments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my-assignments"
					]
				}
			},
			"response": []
		},
		{
			"name": "/submit-assignment [S] updated quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify status, result, and gradeBy values after submission\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");",
							"    pm.expect(jsonData[jsonData.length-1].result).to.eql(\"PASSED\");",
							"    pm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"AUTOMATIC\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"assignmentId\": {{assignmentId}},\n  \"answers\": [\n    {\n      \"textAnswer\": \"Correct\",\n      \"answer\": null\n    },\n    {\n      \"textAnswer\": \"\",\n      \"answer\": 2\n    },\n    {\n      \"textAnswer\": \"\",\n      \"answer\": [\n        0,\n        1,\n        2\n      ]\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/submit-assignment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"submit-assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": " /submit-assignment [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify status, result, and gradeBy values after submission\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");",
							"    pm.expect(jsonData[jsonData.length-1].result).to.eql(\"PASSED\");",
							"    pm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"AUTOMATIC\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"assignmentId\": {{assignmentId}},\n  \"answers\": [\n    {\n      \"textAnswer\": \"Ulan\",\n      \"answer\": null\n    },\n    {\n      \"textAnswer\": \"\",\n      \"answer\": 2\n    },\n    {\n      \"textAnswer\": \"\",\n      \"answer\": [\n        0,\n        1,\n        2\n      ]\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/submit-assignment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"submit-assignment"
					]
				}
			},
			"response": []
		},
		{
			"name": "/my-grades [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify status, result, and gradeBy values after manual granding\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");",
							"    pm.expect(jsonData[jsonData.length-1].result).to.eql(\"PASSED\");",
							"    pm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"AUTOMATIC\");",
							"    ",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/my-grades",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my-grades"
					]
				}
			},
			"response": []
		},
		{
			"name": "/settings/change-name [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Message - User name was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User name was updated\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"newName\": \"{{studentNewName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/settings/change-name",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"settings",
						"change-name"
					]
				}
			},
			"response": []
		},
		{
			"name": "/settings/change-password [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Message - User's password was changed\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User's password was changed\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"password\": \"{{studentPassword}}\",\n  \"newPassword\": \"{{studentNewPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/settings/change-password",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"settings",
						"change-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "/forgot-password [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string - Reset password email was sent\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Reset password email was sent\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{studentEmail}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/forgot-password",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"forgot-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/ - activationCode for reset password [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"studentId\", jsonData[0].id);",
							"pm.environment.set(\"activationCode\", jsonData[0].activationCode);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/api/users?_where=(email,eq,{{studentEmail}})",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "_where",
							"value": "(email,eq,{{studentEmail}})"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/reset-password/:userId/:activationCode [S]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Message - Password was changed\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Password was changed\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"password\": \"{{studentNewPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reset-password/{{studentId}}/{{activationCode}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reset-password",
						"{{studentId}}",
						"{{activationCode}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/assignment/:assignmentId [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify status, result, and gradeBy values after manual granding\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");",
							"    pm.expect(jsonData[jsonData.length-1].result).to.eql(\"PASSED\");",
							"    pm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"TEACHER\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"summary\": \"Summary from teacher\",\n  \"result\": \"PASSED\",\n  \"grades\": [\n    {\n      \"comment\": \"Teacher comment\",\n      \"additionalScore\": 5\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/assignment/{{assignmentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignment",
						"{{assignmentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/my-grades [S] manual grade",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify status, result, and gradeBy values after manual granding\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");",
							"    pm.expect(jsonData[jsonData.length-1].result).to.eql(\"PASSED\");",
							"    pm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"TEACHER\");",
							"    ",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{studentToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/my-grades",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my-grades"
					]
				}
			},
			"response": []
		},
		{
			"name": "/quiz/:id - [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Message - Quiz was deleted\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Quiz was deleted\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Refresh-Token",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImR1YjA3QGZyZWVwcm9kZXNpZ24uY29tIiwiaWF0IjoxNzIxMTAwNTg1LCJleHAiOjE3MjExODY5ODV9.FJZLsKlzq93vRETU_TL0bvj2xdVoAeJVwCuYU8x587c",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/quiz/{{quizId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"quiz",
						"{{quizId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/assignment/:assignmentGroupID [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Message - Assignment was deleted\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Assignment was deleted\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/assignment/{{assignmentGroupID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"assignment",
						"{{assignmentGroupID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/ - activationCode for reset password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"studentId\", jsonData[0].id);",
							"pm.environment.set(\"activationCode\", jsonData[0].activationCode);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/api/users?_where=(email,eq,{{studentEmail}})",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "_where",
							"value": "(email,eq,{{studentEmail}})"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/users [T] Returns list of all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n  {\n    \"email\": \"{{studentEmail}}\",\n    \"name\": \"{{studentName}}\",\n    \"group\": \"{{studentGroup}}\",\n    \"role\": \"STUDENT\"\n  }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "/users/change-name/:userId Changes user's name [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Message - User name was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User name was updated\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{studentNewName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/change-name/{{studentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"change-name",
						"{{studentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/users/change-group/:userId Changes user's group [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Message - User group was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User group was updated\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"group\": \"{{studentNewGroup}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/change-group/{{studentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"change-group",
						"{{studentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/users/change-role/:userId Changes user's role [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Message - User group was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User group was updated\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"role\": \"STUDENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/change-role/{{studentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"change-role",
						"{{studentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/users/:userId Delete user [T]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string - User was deleted\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User was deleted\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{studentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{studentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/sign-in - [T] - Negative 404 error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response time is less than 2000 ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Body matches string - user not found\", function () {",
							"    ",
							"    pm.expect(pm.response.text()).to.include(\"Authentication failed. User not found or password does not match\");",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"teacherToken\", jsonData.token);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{teacherToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"dub07@freeprodesign.com\",\n  \"password\": \"123456\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sign-in",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sign-in"
					]
				}
			},
			"response": []
		}
	]
}